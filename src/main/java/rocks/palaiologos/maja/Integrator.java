package rocks.palaiologos.maja;

import java.util.concurrent.ConcurrentHashMap;

class Integrator {
    private static final ConcurrentHashMap<Integer, GaussLegendreParameters> gaussLegendreParameters = new ConcurrentHashMap<>();

    static {
        gaussLegendreParameters.put(1, new GaussLegendreParameters(new double[] {0.0}, new double[] {2.0}));
        gaussLegendreParameters.put(2, new GaussLegendreParameters(new double[] {0.5773502691896257, -0.5773502691896257}, new double[] {1.0000000000000002, 1.0000000000000002}));
        gaussLegendreParameters.put(3, new GaussLegendreParameters(new double[] {0.7745966692414834, 0.0, -0.7745966692414834}, new double[] {0.5555555555555552, 0.8888888888888888, 0.5555555555555552}));
        gaussLegendreParameters.put(4, new GaussLegendreParameters(new double[] {0.8611363115940526, 0.33998104358485626, -0.33998104358485626, -0.8611363115940526}, new double[] {0.3478548451374536, 0.6521451548625462, 0.6521451548625462, 0.3478548451374536}));
        gaussLegendreParameters.put(5, new GaussLegendreParameters(new double[] {0.906179845938664, 0.5384693101056831, 0.0, -0.5384693101056831, -0.906179845938664}, new double[] {0.23692688505618922, 0.4786286704993667, 0.5688888888888889, 0.4786286704993667, 0.23692688505618922}));
        gaussLegendreParameters.put(6, new GaussLegendreParameters(new double[] {0.932469514203152, 0.6612093864662646, 0.2386191860831969, -0.2386191860831969, -0.6612093864662646, -0.932469514203152}, new double[] {0.17132449237916975, 0.36076157304813833, 0.46791393457269126, 0.46791393457269126, 0.36076157304813833, 0.17132449237916975}));
        gaussLegendreParameters.put(7, new GaussLegendreParameters(new double[] {0.9491079123427583, 0.7415311855993946, 0.4058451513773972, 0.0, -0.4058451513773972, -0.7415311855993946, -0.9491079123427583}, new double[] {0.12948496616887256, 0.27970539148927837, 0.38183005050511903, 0.4179591836734694, 0.38183005050511903, 0.27970539148927837, 0.12948496616887256}));
        gaussLegendreParameters.put(8, new GaussLegendreParameters(new double[] {0.9602898564975364, 0.7966664774136271, 0.525532409916329, 0.18343464249564978, -0.1834346424956498, -0.525532409916329, -0.7966664774136271, -0.9602898564975364}, new double[] {0.10122853629037705, 0.2223810344533716, 0.31370664587788805, 0.3626837833783621, 0.362683783378362, 0.31370664587788805, 0.2223810344533716, 0.10122853629037705}));
        gaussLegendreParameters.put(9, new GaussLegendreParameters(new double[] {0.9681602395076263, 0.8360311073266358, 0.6133714327005906, 0.3242534234038089, 0.0, -0.3242534234038089, -0.6133714327005901, -0.836031107326635, -0.9681602395076263}, new double[] {0.08127438836157208, 0.18064816069484402, 0.26061069640293777, 0.3123470770400029, 0.3302393550012598, 0.3123470770400029, 0.26061069640293394, 0.18064816069485734, 0.08127438836157208}));
        gaussLegendreParameters.put(10, new GaussLegendreParameters(new double[] {0.9739065285171729, 0.8650633666889842, 0.6794095682990245, 0.43339539412924727, 0.14887433898163122, -0.14887433898163122, -0.43339539412924705, -0.6794095682990245, -0.8650633666889842, -0.9739065285171729}, new double[] {0.06667134430867627, 0.1494513491505451, 0.21908636251597455, 0.2692667193099962, 0.2955242247147529, 0.2955242247147529, 0.2692667193099965, 0.21908636251597455, 0.1494513491505451, 0.06667134430867627}));
        gaussLegendreParameters.put(11, new GaussLegendreParameters(new double[] {0.9782286581460579, 0.8870625997680955, 0.7301520055740474, 0.519096129206812, 0.26954315595234496, 0.0, -0.26954315595234496, -0.519096129206812, -0.7301520055740474, -0.8870625997680955, -0.9782286581460572}, new double[] {0.05566856711619379, 0.1255803694649118, 0.1862902109277502, 0.23319376459199073, 0.26280454451024654, 0.2729250867779006, 0.26280454451024654, 0.23319376459199073, 0.1862902109277502, 0.1255803694649118, 0.05566856711618178}));
        gaussLegendreParameters.put(12, new GaussLegendreParameters(new double[] {0.9815606342467191, 0.904117256370472, 0.7699026741943014, 0.5873179542866163, 0.36783149899818013, 0.1252334085114689, -0.1252334085114689, -0.36783149899818013, -0.5873179542866186, -0.7699026741943064, -0.9041172563704709, -0.9815606342467191}, new double[] {0.04717533638650495, 0.10693932599530424, 0.16007832854333107, 0.20316742672307048, 0.23349253653835464, 0.24914704581340277, 0.24914704581340277, 0.23349253653835464, 0.20316742672306354, 0.16007832854331677, 0.10693932599543188, 0.04717533638650495}));
        gaussLegendreParameters.put(13, new GaussLegendreParameters(new double[] {0.9841830547185801, 0.9175983992229947, 0.8015780907333132, 0.6423493394403414, 0.4484927510364467, 0.2304583159551348, 0.0, -0.2304583159551348, -0.4484927510364468, -0.6423493394403402, -0.8015780907333132, -0.9175983992229947, -0.9841830547185801}, new double[] {0.04048400476495717, 0.09212149983758722, 0.13887351021980518, 0.1781459807619333, 0.20781604753688857, 0.2262831802628972, 0.2325515532308739, 0.2262831802628972, 0.20781604753688787, 0.17814598076195587, 0.13887351021980518, 0.09212149983758722, 0.04048400476495717}));
        gaussLegendreParameters.put(14, new GaussLegendreParameters(new double[] {0.9862838086967973, 0.9284348836635813, 0.8272013150697467, 0.6872929048116796, 0.5152486363581535, 0.3191123689278898, 0.10805494870734367, -0.10805494870734367, -0.3191123689278898, -0.5152486363581551, -0.6872929048116796, -0.8272013150697687, -0.9284348836635813, -0.9862838086967973}, new double[] {0.035119460331396235, 0.08015808715999556, 0.12151857068774563, 0.15720316715821328, 0.18553839747794101, 0.20519846372129566, 0.21526385346315782, 0.21526385346315782, 0.20519846372129566, 0.18553839747793577, 0.15720316715821328, 0.12151857068777704, 0.08015808715999556, 0.035119460331396235}));
        gaussLegendreParameters.put(15, new GaussLegendreParameters(new double[] {0.9879925180204869, 0.9372733924006501, 0.8482065834103859, 0.7244177313601633, 0.5709721726085388, 0.3941513470775636, 0.20119409399743451, 0.0, -0.20119409399743454, -0.3941513470775636, -0.5709721726085385, -0.7244177313601633, -0.8482065834104315, -0.9372733924006992, -0.9879925180204869}, new double[] {0.030753241995591134, 0.0703660474870926, 0.10715922046681606, 0.13957067792623126, 0.166269205816981, 0.18616100001556046, 0.1984314853271117, 0.2025782419255613, 0.19843148532711147, 0.18616100001556046, 0.16626920581700985, 0.13957067792623126, 0.10715922046734272, 0.07036604748957893, 0.030753241995591134}));
        gaussLegendreParameters.put(16, new GaussLegendreParameters(new double[] {0.9894009349916794, 0.944575023073309, 0.8656312023879879, 0.7554044083550019, 0.6178762444026353, 0.4580167776572272, 0.28160355077925886, 0.09501250983763743, -0.09501250983763743, -0.281603550779259, -0.4580167776572272, -0.6178762444026353, -0.7554044083549711, -0.8656312023879879, -0.944575023073309, -0.9894009349916794}, new double[] {0.02715245941433135, 0.06225352393954377, 0.0951585116821403, 0.12462897125571298, 0.14959598881655842, 0.1691565193949979, 0.18260341504492403, 0.18945061045506859, 0.18945061045506859, 0.18260341504492367, 0.1691565193949979, 0.14959598881655842, 0.12462897125573379, 0.0951585116821403, 0.06225352393954377, 0.02715245941433135}));
        gaussLegendreParameters.put(17, new GaussLegendreParameters(new double[] {0.9905754753144296, 0.9506755217687874, 0.8802391537272195, 0.781514003896727, 0.6576711592166963, 0.5126905370864773, 0.35123176345387636, 0.17848418149584788, 0.0, -0.17848418149584788, -0.35123176345387636, -0.5126905370864773, -0.6576711592166963, -0.781514003896727, -0.8802391537272195, -0.9506755217687874, -0.9905754753144685}, new double[] {0.024148302873841003, 0.05545952936213756, 0.08503614831578421, 0.11188384719406361, 0.13513636846856383, 0.15404576107680726, 0.1680041021564474, 0.1765627053669925, 0.17944647035620653, 0.1765627053669925, 0.1680041021564474, 0.15404576107680726, 0.13513636846856383, 0.11188384719406361, 0.08503614831578421, 0.05545952936213756, 0.024148302872731852}));
        gaussLegendreParameters.put(18, new GaussLegendreParameters(new double[] {0.9915651684208231, 0.955823949570851, 0.8926024664975067, 0.8037049589723346, 0.6916870430603611, 0.559770831073954, 0.41175116146284213, 0.2518862256915055, 0.0847750130417353, -0.0847750130417353, -0.2518862256915055, -0.41175116146284235, -0.5597708310739413, -0.6916870430603611, -0.803704958972616, -0.8926024664972614, -0.9558239495718387, -0.9915651684206849}, new double[] {0.0216160135507518, 0.04971454890058979, 0.07642573024760495, 0.10094204410809576, 0.1225552067112437, 0.14064291467067044, 0.1546846751262592, 0.1642764837458325, 0.1691423829631436, 0.1691423829631436, 0.1642764837458325, 0.154684675126269, 0.14064291467057857, 0.1225552067112437, 0.10094204410415436, 0.07642573025985744, 0.04971454887541227, 0.02161601352331323}));
        gaussLegendreParameters.put(19, new GaussLegendreParameters(new double[] {0.9924068438436546, 0.9602081521349125, 0.9031559036154052, 0.8227146565374399, 0.7209661773350704, 0.6005453046616828, 0.464570741375961, 0.31656409996362983, 0.16035864564022534, 0.0, -0.16035864564022537, -0.3165640999636296, -0.46457074137596066, -0.6005453046616828, -0.7209661773351413, -0.822714656537303, -0.903155903614925, -0.9602081521347751, -0.9924068438436546}, new double[] {0.019461788254324767, 0.04481422676865302, 0.06904454274550814, 0.09149002162208672, 0.11156664554529314, 0.12875396253927615, 0.14260670217360047, 0.15276604206585973, 0.15896884339395442, 0.1610544498487837, 0.15896884339395428, 0.1527660420658597, 0.14260670217361757, 0.12875396253927615, 0.11156664554768629, 0.09149002161995631, 0.06904454277697541, 0.04481422674871133, 0.019461788254324767}));
        gaussLegendreParameters.put(20, new GaussLegendreParameters(new double[] {0.9931285991847529, 0.9639719272755095, 0.9122344282523184, 0.8391169718220997, 0.7463319064598453, 0.6360536807265798, 0.5108670019508244, 0.3737060887154199, 0.22778585114164507, 0.07652652113349734, -0.07652652113349734, -0.22778585114164515, -0.37370608871542094, -0.5108670019508244, -0.6360536807265563, -0.7463319064598453, -0.8391169718220997, -0.9122344282506875, -0.9639719272788397, -0.9931285991847529}, new double[] {0.017614007157386383, 0.04060142977224919, 0.0626720483488969, 0.08327674157101496, 0.10193011981620358, 0.11819453196164344, 0.13168863844923476, 0.1420961093183835, 0.14917298647260396, 0.15275338713072578, 0.15275338713072578, 0.14917298647260438, 0.14209610931838948, 0.13168863844923476, 0.1181945319617905, 0.10193011981620358, 0.08327674157101496, 0.06267204834372453, 0.04060142980079448, 0.017614007157386383}));
        gaussLegendreParameters.put(21, new GaussLegendreParameters(new double[] {0.9937521706214602, 0.9672268385570837, 0.9200993341469373, 0.8533633645819318, 0.7684399634770437, 0.6671388041975085, 0.5516188358872024, 0.42434212020743967, 0.2880213168024011, 0.1455618541608951, 0.0, -0.14556185416089507, -0.28802131680240123, -0.42434212020743967, -0.5516188358872024, -0.6671388041973559, -0.7684399634753577, -0.8533633645819318, -0.9200993341469373, -0.9672268385570837, -0.9937521706214602}, new double[] {0.016017228123632765, 0.03695378980804179, 0.057134425347816764, 0.0761001136774544, 0.09344442346883346, 0.10879729916789704, 0.12183141605371703, 0.13226893863333353, 0.13988739479107407, 0.14452440398996996, 0.14608113364969041, 0.1445244039899699, 0.1398873947910704, 0.13226893863333353, 0.12183141605371703, 0.10879729917009408, 0.09344442345497711, 0.0761001136774544, 0.057134425347816764, 0.03695378980804179, 0.016017228123632765}));
        gaussLegendreParameters.put(22, new GaussLegendreParameters(new double[] {0.9942945854859869, 0.9700604978337076, 0.9269567721866443, 0.8658125777217346, 0.7878168059820263, 0.6944872631867606, 0.5876404035070171, 0.46935583798676656, 0.34193582089208335, 0.20786042668822138, 0.06973927331972223, -0.06973927331972223, -0.20786042668822127, -0.34193582089208446, -0.4693558379867626, -0.5876404035070413, -0.6944872631867606, -0.7878168059771182, -0.8658125777217346, -0.9269567721878061, -0.9700604978337076, -0.9942945854859869}, new double[] {0.014627995353439614, 0.03377490158767526, 0.052293335023065754, 0.06979646838732674, 0.0859416062357598, 0.10041414443730909, 0.11293229608098225, 0.1232523768105645, 0.13117350478706505, 0.1365414983460153, 0.13925187285563198, 0.13925187285563198, 0.13654149834601473, 0.13117350478706516, 0.12325237681051604, 0.11293229608117214, 0.10041414443730909, 0.08594160621976286, 0.06979646838732674, 0.05229333543371856, 0.03377490158767526, 0.014627995353439614}));
        gaussLegendreParameters.put(23, new GaussLegendreParameters(new double[] {0.9947693350115461, 0.9725424712326834, 0.9329710867568347, 0.8767523582882234, 0.8048884016131631, 0.718661363130071, 0.6196098757636707, 0.5095014778460233, 0.3903010380302898, 0.264135680970345, 0.1332568242984661, 0.0, -0.1332568242984661, -0.26413568097034484, -0.3903010380302921, -0.5095014778460233, -0.6196098757635018, -0.7186613631316595, -0.8048884016288034, -0.8767523582882234, -0.9329710867568347, -0.9725424711931534, -0.9947693349903135}, new double[] {0.013411860492500555, 0.03098800498949364, 0.04803767199789382, 0.06423242135054424, 0.07928141174717462, 0.09291576605401433, 0.10489209146548678, 0.11499664022240712, 0.12304908430673206, 0.12890572218808322, 0.13246203940469675, 0.13365457218610619, 0.13246203940469675, 0.12890572218807972, 0.12304908430673156, 0.11499664022240712, 0.10489209146628674, 0.09291576607554264, 0.0792814116904203, 0.06423242135054424, 0.04803767199789382, 0.030988006443113007, 0.013411859245300271}));
        gaussLegendreParameters.put(24, new GaussLegendreParameters(new double[] {0.9951872200029244, 0.9747285559913043, 0.938274551957409, 0.886415527003619, 0.8200019859628385, 0.7401241915787559, 0.6480936519379751, 0.5454214713889839, 0.4337935076260624, 0.31504267969616434, 0.19111886747361637, 0.06405689286260563, -0.06405689286260563, -0.19111886747361623, -0.3150426796961638, -0.433793507626038, -0.5454214713888003, -0.6480936519380767, -0.7401241915775607, -0.8200019859628385, -0.886415527003619, -0.9382745520893138, -0.9747285559913043, -0.9951872200029244}, new double[] {0.012341231345470528, 0.028531387473406025, 0.044277439236397674, 0.05929858547821481, 0.07334648137767305, 0.08619016148000241, 0.09761865210956917, 0.10744427011598222, 0.1155056680536699, 0.12167047292779859, 0.12583745634682794, 0.12793819534675221, 0.12793819534675221, 0.12583745634682839, 0.12167047292780499, 0.11550566805374171, 0.10744427011575017, 0.09761865210799835, 0.08619016154798127, 0.07334648137767305, 0.05929858547821481, 0.04427743740527089, 0.028531387473406025, 0.012341231345470528}));
        gaussLegendreParameters.put(25, new GaussLegendreParameters(new double[] {0.9955569699015934, 0.9766639211871648, 0.9429745715638134, 0.8949919977666714, 0.8334426287891805, 0.759259263019568, 0.673566368477513, 0.5776629302412174, 0.47300273144572713, 0.3611723058093866, 0.24386688372098833, 0.12286469261071038, 0.0, -0.1228646926107104, -0.2438668837209882, -0.36117230580938625, -0.47300273144575766, -0.5776629302412174, -0.673566368477513, -0.7592592630223294, -0.8334426288256088, -0.8949919976979275, -0.9429745715638134, -0.9766639211871648, -0.9955569698700899}, new double[] {0.01139379416774799, 0.026354998139610203, 0.040939150393429366, 0.05490469993963978, 0.06803833357649568, 0.08014070032907238, 0.0910282619785554, 0.10053594907007728, 0.1085196244741925, 0.11485825914571038, 0.11945576353578491, 0.12224244299031019, 0.12317605372671545, 0.12224244299031004, 0.1194557635357844, 0.11485825914570032, 0.10851962447427749, 0.10053594907007728, 0.0910282619785554, 0.08014070052703272, 0.0680383328425972, 0.054904699403802285, 0.040939150393429366, 0.026354998139610203, 0.01139378937957923}));
        gaussLegendreParameters.put(26, new GaussLegendreParameters(new double[] {0.9958857013061597, 0.9783854459780811, 0.9471590668372847, 0.9026378617962445, 0.8454459428018544, 0.7763859487794913, 0.6964272604334033, 0.606692293017235, 0.5084407148244022, 0.4030517551234999, 0.29200483948595785, 0.17685882035689016, 0.05923009342931321, -0.05923009342931321, -0.17685882035689027, -0.2920048394859565, -0.4030517551234999, -0.5084407148244022, -0.606692293017235, -0.6964272604273383, -0.7763859487902288, -0.8454459427882322, -0.9026378618092252, -0.9471590668372847, -0.9783854459780811, -0.9958857013061597}, new double[] {0.010551386171972299, 0.024417832914839375, 0.03796239760541369, 0.05097582440335356, 0.06327404624216142, 0.07468414948251441, 0.08504589431654254, 0.09421380034651379, 0.10205916109467647, 0.10847184052860014, 0.11336181654631768, 0.1166604434852967, 0.11832141527926228, 0.11832141527926228, 0.11666044348529674, 0.1133618165463178, 0.10847184052860014, 0.10205916109467647, 0.09421380034651379, 0.08504589433739658, 0.0746841497427336, 0.0632740468007162, 0.050975823894485975, 0.03796239760541369, 0.024417832914839375, 0.010551386171972299}));
        gaussLegendreParameters.put(27, new GaussLegendreParameters(new double[] {0.9961792631370235, 0.9799234745799282, 0.9509005600278927, 0.9094823199405669, 0.8562079083238122, 0.7917716388705528, 0.7170134737794233, 0.632907971939467, 0.5405515645806656, 0.4411482517499702, 0.3359939036385129, 0.22645936543953704, 0.11397258560952998, 0.0, -0.11397258560952998, -0.22645936543953704, -0.3359939036385105, -0.4411482517499825, -0.5405515645806656, -0.6329079719376547, -0.7170134737863408, -0.7917716388128279, -0.8562079089838511, -0.9094823199405669, -0.9509005600278927, -0.9799234740417624, -0.9961792631370235}, new double[] {0.009798966792090351, 0.022686257483572368, 0.035297026422633465, 0.04744943072292948, 0.05898353315870885, 0.0697488246108641, 0.07960486749538895, 0.08842315856875099, 0.09608872736501495, 0.10250163781753018, 0.1075782857885351, 0.1112524883568438, 0.11347634610896504, 0.114220867378957, 0.11347634610896504, 0.1112524883568438, 0.10757828578852954, 0.10250163781735475, 0.09608872736501495, 0.08842315858885245, 0.079604867509693, 0.06974882497829252, 0.05898352948108052, 0.04744943072292948, 0.035297026422633465, 0.02268631992917845, 0.009798966792090351}));
        gaussLegendreParameters.put(28, new GaussLegendreParameters(new double[] {0.9964424996075852, 0.9813031634548249, 0.9542592810341305, 0.9156330241388294, 0.8658925247272474, 0.8056413703893147, 0.7356108781234113, 0.6566510940111865, 0.5697204718128737, 0.4758742249550849, 0.3762515160890786, 0.27206162763517805, 0.16456928213338073, 0.05507928988403427, -0.055079289884034266, -0.16456928213338082, -0.2720616276351783, -0.3762515160890786, -0.4758742249550849, -0.5697204718134737, -0.6566510940077734, -0.7356108781573697, -0.8056413703893147, -0.8658925247272474, -0.9156330241388294, -0.9542592870258553, -0.9813031634548249, -0.9964424996075852}, new double[] {0.009124280333161098, 0.021132171910428318, 0.03290144219438812, 0.04427297070103816, 0.05510735032522285, 0.06527292413972983, 0.07464621365429801, 0.08311341729588802, 0.09057174439782409, 0.09693065799734027, 0.10211296757808788, 0.10605576592285673, 0.10871119225829412, 0.11004701301647524, 0.11004701301647524, 0.10871119225829474, 0.1060557659228436, 0.10211296757808788, 0.09693065799734027, 0.09057174439057598, 0.08311341727889013, 0.07464621454911011, 0.06527292413972983, 0.05510735032522285, 0.04427297070103816, 0.032901370949456006, 0.021132171910428318, 0.009124280333161098}));
        gaussLegendreParameters.put(29, new GaussLegendreParameters(new double[] {0.996679444601925, 0.9825454962503805, 0.9572856028947397, 0.9211802304639705, 0.8746378086205924, 0.8181854860785635, 0.7524628519948003, 0.6782145375610373, 0.5962817971454132, 0.5075929551242316, 0.4131528881739787, 0.31403163786764204, 0.21135228616600102, 0.1062782301326792, 0.0, -0.1062782301326792, -0.21135228616600088, -0.3140316378676409, -0.4131528881740148, -0.5075929551242161, -0.5962817971454132, -0.6782145375742488, -0.7524628520356603, -0.8181854865027998, -0.8746378086205924, -0.9211802304639705, -0.9572856028947397, -0.9825454962503805, -0.996679444601925}, new double[] {0.008516834768057565, 0.019732225750447502, 0.030740443685079798, 0.04140209109368247, 0.05159482674368398, 0.06120309631753348, 0.07011793551162693, 0.07823832702621109, 0.0854722573648078, 0.09173775713929175, 0.09696383409448422, 0.10109127375990463, 0.10407331007772885, 0.10587615509732082, 0.10647938171831425, 0.10587615509732082, 0.1040733100777283, 0.10109127375992864, 0.09696383409490375, 0.09173775713777607, 0.0854722573648078, 0.0782383272230603, 0.07011793309455674, 0.0612030939756362, 0.05159482674368398, 0.04140209109368247, 0.030740443685079798, 0.019732225750447502, 0.008516834768057565}));
        gaussLegendreParameters.put(30, new GaussLegendreParameters(new double[] {0.9968934788385783, 0.9836681303954327, 0.9600218679253069, 0.9262000483209758, 0.8825605315127816, 0.8295657627256073, 0.7677774324495918, 0.6978504947961983, 0.6205261829850507, 0.5366241481398473, 0.44703376953822366, 0.35270472553087606, 0.25463692616789024, 0.15386991360858351, 0.05147184255531769, -0.0514718425553177, -0.15386991360858351, -0.25463692616789024, -0.35270472553086507, -0.4470337695382238, -0.5366241481396522, -0.6205261829965519, -0.6978504947512647, -0.7677774323367021, -0.8295657627256073, -0.8825605374739103, -0.9262000483209758, -0.9600218679253069, -0.9836681303954327, -0.9968934805729776}, new double[] {0.00796847014932442, 0.01846623817262955, 0.028784768453579815, 0.038799054889514295, 0.04840269920379943, 0.05749313406373754, 0.0659742312905015, 0.07375597337306751, 0.08075589536997746, 0.08689978719419916, 0.09212252223756326, 0.09636873717469331, 0.09959342058679513, 0.10176238974840533, 0.10285265289355887, 0.10285265289355883, 0.10176238974840533, 0.09959342058679513, 0.09636873717465388, 0.0921225222368812, 0.08689978719696193, 0.08075589529483085, 0.07375597468949324, 0.06597423645803696, 0.05749313406373754, 0.04840274307210075, 0.038799054889514295, 0.028784768453579815, 0.01846623817262955, 0.00796852099550476}));
    }

    private Integrator() {
    }

    // N = 10000
    public static double finiteSimpson(MonadicFunction f, double a, double b, int N) {
        double h = (b - a) / (N - 1);

        // 1/3 terms
        double sum = 1.0 / 3.0 * (f.apply(a) + f.apply(b));

        // 4/3 terms
        for (int i = 1; i < N - 1; i += 2) {
            double x = a + h * i;
            sum += 4.0 / 3.0 * f.apply(x);
        }

        // 2/3 terms
        for (int i = 2; i < N - 1; i += 2) {
            double x = a + h * i;
            sum += 2.0 / 3.0 * f.apply(x);
        }

        return sum * h;
    }

    public static GaussLegendreParameters getParameters(int n) {
        synchronized (gaussLegendreParameters) {
            if (!gaussLegendreParameters.containsKey(n)) {
                gaussLegendreParameters.put(n, new GaussLegendreParameters(n));
            }
            return gaussLegendreParameters.get(n);
        }
    }

    // N = 5
    public static double gaussLegendreIntegrate(MonadicFunction f, double a, double b, int N) {
        GaussLegendreParameters parameters = getParameters(N);
        double c1 = (b - a) / 2, c2 = (b + a) / 2, sum = 0;
        for (int i = 0; i < N; i++)
            sum += parameters.weight[i] * f.apply(c1 * parameters.lroots[i] + c2);
        return c1 * sum;
    }

    // https://www.genivia.com/files/qthsh.pdf.
    // returns a two element double array of the result and the estimated error.
    public static double[] finiteTanhSinh(MonadicFunction f, double a, double b, int n, double eps) {
        final double tol = 10 * eps;
        double c = (a + b) / 2;
        double d = (b - a) / 2;
        double s = f.apply(c);
        double e, v, h = 2;
        int k = 0;
        if (n <= 0)
            n = 6;
        if (eps <= 0)
            eps = 1E-9;
        do {
            double p = 0, q, fp = 0, fm = 0, t, eh;
            h /= 2;
            t = eh = Math.exp(h);
            if (k > 0)
                eh *= eh;
            do {
                double u = Math.exp(1 / t - t);
                double r = 2 * u / (1 + u);
                double w = (t + 1 / t) * r / (1 + u);
                double x = d * r;
                if (a + x > a) {
                    double y = f.apply(a + x);
                    if (Double.isFinite(y))
                        fp = y;
                }
                if (b - x < b) {
                    double y = f.apply(b - x);
                    if (Double.isFinite(y))
                        fm = y;
                }
                q = w * (fp + fm);
                p += q;
                t *= eh;
            } while (Math.abs(q) > eps * Math.abs(p));
            v = s - p;
            s += p;
            ++k;
        } while (Math.abs(v) > tol * Math.abs(s) && k <= n);
        e = Math.abs(v) / (Math.abs(s) + eps);
        return new double[]{d * s * h, e};
    }

    public static class GaussLegendreParameters {
        public double[] lroots, weight;
        public double[][] lcoef;
        private final int N;

        public GaussLegendreParameters(int N) {
            this.N = N;
            this.lroots = new double[N];
            this.weight = new double[N];
            this.lcoef = new double[N + 1][N + 1];
            legeCoef();
            legeRoots();
            lcoef = null;
        }

        public GaussLegendreParameters(double[] roots, double[] weights) {
            this.N = roots.length;
            this.lroots = roots;
            this.weight = weights;
        }

        private void legeCoef() {
            lcoef[0][0] = lcoef[1][1] = 1;

            for (int n = 2; n <= N; n++) {

                lcoef[n][0] = -(n - 1) * lcoef[n - 2][0] / n;

                for (int i = 1; i <= n; i++) {
                    lcoef[n][i] = ((2 * n - 1) * lcoef[n - 1][i - 1]
                            - (n - 1) * lcoef[n - 2][i]) / n;
                }
            }
        }

        private double legeEval(int n, double x) {
            double s = lcoef[n][n];
            for (int i = n; i > 0; i--)
                s = s * x + lcoef[n][i - 1];
            return s;
        }

        private double legeDiff(int n, double x) {
            return n * (x * legeEval(n, x) - legeEval(n - 1, x)) / (x * x - 1);
        }

        private void legeRoots() {
            double x, x1;
            for (int i = 1; i <= N; i++) {
                x = Math.cos(Math.PI * (i - 0.25) / (N + 0.5));
                int maxiter = 1000000;
                do {
                    x1 = x;
                    x -= legeEval(N, x) / legeDiff(N, x);
                    if(maxiter-- == 0)
                        break; // Can't converge, work with what we have.
                } while (Math.abs(x - x1) > Maja.EPSILON);

                lroots[i - 1] = x;

                x1 = legeDiff(N, x);
                weight[i - 1] = 2 / ((1 - x * x) * x1 * x1);
            }
        }
    }
}
